color = "red", size=0.1) +
ggsave("beta.effects.tiff", height=110, width=110, units='mm', dpi=600)
########## marginal prediction
newdata <- list(xdata = xdat, nsim=10000)
tmp     <- gjamPredict(jdm1, newdata=newdata)
full    <- tmp$sdList$yMu
# Calculate marginal AUC for each species (larger is better)
AUC <- numeric()
for(i in 1:dim(ydat)[2]){
AUC[i] <- somers2(full[,i], ydat[,i])[1]
}
AUC
## Conditional predictions
############## For all species
# Grab species names for looping through species
cnames <- colnames(ydat)
cond.preds <- matrix(NA, nrow = 2, ncol=length(cnames))
dim(cond.preds)
for(j in 1:length(cnames)){
yc <- ydat[ , !(colnames(ydat) %in% cnames[j])] # Loop through each species for conditional predictions
new <- list(ydataCond = yc, xdata=xdat, nsim=10000)   # cond on obs P/A data
preds <- gjamPredict(output = jdm1, newdata = new)
condy  <- preds$sdList$yMu
cond.preds[2,j] <- somers2(condy[,(colnames(condy) %in% cnames[j])], ydat[,(colnames(condy) %in% cnames[j])])[1]
cond.preds[1,j] <- somers2(full[,(colnames(condy) %in% cnames[j])], ydat[,(colnames(condy) %in% cnames[j])])[1]
}
colnames(cond.preds) <- cnames
rownames(cond.preds) <- c("Marginal AUC", "Conditional AUC")
write.csv(cond.preds, "Marginal_conditional_AUCs.csv")
# MCMC samples of Sigma
SigmaOut <-jdm1$chains$sgibbs
str(SigmaOut)
saveRDS(SigmaOut, file="SigmaOut.rds")
## Convert Sigma to Corr
# SigmaOut.rds contains the lower triangle of the variance covariance matrix, i.e., 136 columns with 16 species
Sigma <- readRDS(file="SigmaOut.rds")
str(Sigma)
dim(Sigma)
postSigMeans <- apply(Sigma,2,mean)
length(postSigMeans)
S <- diag(dim(ydat)[2])
S[lower.tri(S, diag=TRUE)] <- postSigMeans
# Convert S (half matrix) to full matrix
X <- diag(dim(ydat)[2])
X[lower.tri(X, diag=TRUE)] <- postSigMeans
X <- X + t(X) - diag(diag(X))
# Convert Sigma to Rho
Rho <- array(NA, dim=c(dim(Sigma)[1], dim(X)[1], dim(X)[1]))
dim(Rho)
for(samp in 1:dim(Sigma)[1]){
# Grab mcmc sample from Sigma
sigsamp <- Sigma[samp,]
# Convert S (half matrix) to full matrix
Stemp <- diag(dim(ydat)[2])
Stemp[lower.tri(Stemp, diag=TRUE)] <- sigsamp
Stemp <- Stemp + t(Stemp) - diag(diag(Stemp))
# Calculate correlation matrix from Sigma
Rho[samp, , ] <- cov2cor(Stemp)
}
dim(Rho)
# Posterior mean
RhoMean <- apply(Rho,c(3,2),mean)
# Lower CI
RhoCIL <- apply(Rho,c(3,2),quantile, 0.025)
# Upper CI
RhoCIU <- apply(Rho,c(3,2),quantile, 0.975)
# Use this to plot only significant cors
sigCors <- RhoCIL * RhoCIU > 0
########### Residual correlations
species.names<-c("Blacknose Dace", "Bluegill", "Bluntnose Minnow", "Clinch Dace", "Cottus", "Creek Chub", "Fantail Darter",
"Northern Hogsucker", "Rainbow Darter", "Redbreast Sunfish", "Rock Bass", "Rosyside Dace", "Snubnose Darter",
"Central Stoneroller", "White Shiner", "White Sucker")
# Posterior means of Rho
# jdm1$parameters$corMu
# colnames(ydat)
colnames(RhoMean) <- species.names
rownames(RhoMean) <- species.names
colMat <- matrix(NA, nrow = nrow(RhoMean), ncol = ncol(RhoMean))
colMat[which(RhoMean > 0 & sigCors =='TRUE', arr.ind = TRUE)] <- "blue"
colMat[which(RhoMean < 0 & sigCors =='TRUE', arr.ind = TRUE)] <- "red"
res<-6
tiff(filename = 'resid_corr.tiff', height = 500*res, width = 500*res, res=72*res)
def.par <- par(no.readonly = TRUE)
chordDiagram(RhoMean, symmetric = TRUE,
annotationTrack = c("grid"), grid.col = "grey",
col = colMat,
annotationTrackHeight = c(0.01, 0.01),
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(RhoMean))))))
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.text(CELL_META$xcenter, CELL_META$ylim[1], CELL_META$sector.index,
facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
}, bg.border = NA)
par(def.par)
dev.off()
# Posterior means
# sigma
# SigmaOut <-jdm1$chains$sgibbs
# BetaOut <- jdm1$chains$bgibbs
# saveRDS(BetaOut, file=paste("BetaOut",i,".rds",sep=''))
# saveRDS(SigmaOut, file=paste("SigmaOut",i,".rds",sep=''))
# saveRDS(jdm1, file=paste("gjamOut",i,".rds",sep=''))
# SigmaOut.rds contains the lower triangle of the variance covariance matrix, i.e., 136 columns with 16 species
Sigma <- readRDS(file="SigmaOut.rds")
str(Sigma)
dim(Sigma)
postSigMeans <- apply(Sigma,2,mean)
length(postSigMeans)
S <- diag(16)
S[lower.tri(S, diag=TRUE)] <- postSigMeans
# Convert S (half matrix) to full matrix
X <- diag(16)
X[lower.tri(X, diag=TRUE)] <- postSigMeans
X <- X + t(X) - diag(diag(X))
# Convert Sigma to Rho
Rho <- array(NA, dim=c(dim(Sigma)[1], dim(X)[1], dim(X)[1]))
dim(Rho)
for(samp in 1:dim(Sigma)[1]){
# Grab mcmc sample from Sigma
sigsamp <- Sigma[samp,]
# Convert S (half matrix) to full matrix
Stemp <- diag(16)
Stemp[lower.tri(Stemp, diag=TRUE)] <- sigsamp
Stemp <- Stemp + t(Stemp) - diag(diag(Stemp))
# Calculate correlation matrix from Sigma
Rho[samp, , ] <- cov2cor(Stemp)
}
dim(Rho)
RhoMean <- apply(Rho,c(3,2),mean)
# Make upper triangular matrix set to zero
RhoMean[upper.tri(RhoMean)] <- NA
# remove diagonal
RhoMean[upper.tri(RhoMean,diag=TRUE)] <- NA
RMean <- as.numeric(t(RhoMean))
RMean <- RMean[!is.na(RMean)]
# Lower CI
RhoCIL <- apply(Rho,c(3,2),quantile, 0.025)
# Make upper triangular matrix set to zero
RhoCIL[upper.tri(RhoCIL)] <- NA
# remove diagonal
RhoCIL[upper.tri(RhoCIL,diag=TRUE)] <- NA
RCIL <- as.numeric(t(RhoCIL))
RCIL <- RCIL[!is.na(RCIL)]
# Upper CI
RhoCIU <- apply(Rho,c(3,2),quantile, 0.975)
# Make upper triangular matrix set to zero
RhoCIU[upper.tri(RhoCIU)] <- NA
# remove diagonal
RhoCIU[upper.tri(RhoCIU,diag=TRUE)] <- NA
RCIU <- as.numeric(t(RhoCIU))
RCIU <- RCIU[!is.na(RCIU)]
saveRDS(Rho, file="ResRho.rds")
rm(list=ls())
require(data.table)
require(mvtnorm)
require(abind)
### Caclulate, from a JDM, the between species correlation due to their shared
### environmental responses. Following the approach of Pollock et al. (2014).
# Read in final dat
datFinal <- fread("Finaldat.csv")
head(datFinal)
# Read in RDS file model fit
out1 <- readRDS(file="gjamOUT1.rds")
# Number of response variables
numY <- 16
X <- as.matrix(scale(datFinal[,c(22:25,27)]))
head(X)
X <- as.matrix(cbind(c(rep(1,dim(X)[1])),X))
dim(X)
head(X)
# Number of covariates
K <- dim(X[,-1])[2]
# number of sites
n.sites <- nrow(X)
n.sites
# number of species in Occurance matrix
n.species <- numY
# Beta coefficients dim = [nsim, 96], need array of [nsim, nspecies, ncovariates]
Beta <- out1$chains$bgibbs
dim(Beta)
library(devtools)
# library(Hmsc)
library(gjam)
library(dplyr)
library(coda)
library(xtable)
library(ggplot2)
library(data.table)
library(ggsn) # add N arrow
library(rgdal)
library(maps)
library(mapdata)
library(ggmap)
library(sf)
library(ggrepel) # for labeling map
library(doBy)
library(car) # for the logit function
library(sp)
library(lubridate)
library(colorspace)
library(corrplot)
library(circlize)
library(psych)
library(formattable)
library(knitr)
library(tidyr)
library(Hmisc)
# read in data
fishP=fread("Dace_Data_Occu.csv")
dim(fishP)
fishP
summary(fishP)
# #Remove species with low detections (present at <10 sites)
fishP[,c(9,14,15,16,17,19,21,23,26,29,30,31) ]<- NULL
# fishP[,c(9,14,11,15,16,17,18,19,20,21,23,25,26,29,30,31) ]<- NULL
head(fishP)
##########################################
### Get data in order for hmsc
# Species matrix, a site * species matrix
ydat <- as.matrix(fishP[,6:21])
ydat <- as.data.frame(ydat)
head(Beta)
dim(Beta)
spp.names <- colnames(ydat)
int.names <- vector()
for(i in 1:dim(ydat)[2]){
int.names[i] <- paste(spp.names[i],"_intercept",sep='')
}
Beta <- Beta[, !colnames(Beta) %in% int.names]
dim(Beta)
Beta2 <- Beta[, !colnames(Beta) %in% int.names]
dim(Beta2)
dim(Beta2)
head(Beta2)
# NUmber of MCMC samples to use for calculating EnvRho
nsim <- 50000
# Chain length from analysis
chainLength <- dim(Beta2)[1]
chainLength
dim(Beta2)
ID = seq( 1 , chainLength , floor(chainLength/nsim) )
length(ID)
# Grab nsim samples
Beta2sub <- Beta2[ID,]
dim(Beta2sub)
head(Beta2sub)
const <- 5
lst1 <- list()
for(i in 1:5){
lst1[[i]] <- Beta2sub[,c(i,5+i,10+i,15+i,20+i,25+i,30+i,35+i,40+i,45+i,50+i,55+i,60+i,65+i,70+i,75+i)]
}
str(lst1)
head(lst1[[1]])
head(lst1[[2]])
BetaA <- array(as.numeric(unlist(lst1)), dim=c(length(ID),numY,K))
dim(BetaA)
# Rename for code below
Beta <- BetaA
# Number of mcmc samples
n.sims <- dim(Beta)[1]
Sigma2 <- array(NA, c(length(ID), numY, numY))
dim(Sigma2)
############# Calculate the correlation due to the environment
EnvRho <- apply(Beta, 1,
function(x) {
matrix(rowSums(apply(cbind(x[, -1]), 2, function(y) outer(y, y))), n.species)
}
)
dim(EnvRho) <- rev(dim(Sigma2))
EnvRho <- aperm(EnvRho, c(3, 2, 1))
dim(EnvRho)
COVX <- cov(X)
for(sims in seq_len(n.sims)) {
for(species in seq_len(n.species)) {
for(species.prime in seq_len(n.species)) {
EnvRho[sims, species, species.prime] <- (EnvRho[sims, species, species.prime] +
sum(sapply(seq_len(K)[-1], function(k) {
sum(Beta[sims, species, k] *
Beta[sims, species.prime, seq_len(K)[-c(1, k)]] *
COVX[k, seq_len(K)[-c(1, k)]]
)}
)))
}
}
}
EnvRho <- apply(EnvRho, 1, cov2cor)
dim(EnvRho) <- rev(dim(Sigma2))
EnvRho <- aperm(EnvRho, c(3, 2, 1))
dim(EnvRho)
# Posterior mean EnvRho and 95% credile intervals
apply(EnvRho,c(3,2),mean)
apply(EnvRho,c(3,2),quantile, 0.025)
apply(EnvRho,c(3,2),quantile, 0.975)
# Save posterior samples for EnvRho
saveRDS(EnvRho, file="EnvRho.rds")
# rm(list=ls())
require(data.table)
require(mvtnorm)
require(abind)
### Caclulate, from a JDM, the between species correlation due to their shared
### environmental responses. Following the approach of Pollock et al. (2014).
# Read in final dat
datFinal <- fread("Finaldat.csv")
head(datFinal)
# Read in RDS file model fit
out1 <- readRDS(file="gjamOUT1.rds")
# Number of response variables
numY <- 16
####### !!!!!!!! Need to specify predictors
X <- as.matrix(scale(datFinal[,c(22:25,27)]))
# Add 1's to design matrix for matrix multiplication (not needed for this calc, but added for adapting Pollock code)
X <- as.matrix(cbind(c(rep(1,dim(X)[1])),X))
dim(X)
head(X)
# rm(list=ls())
# load the package
library(devtools)
# library(Hmsc)
library(gjam)
library(dplyr)
library(coda)
library(xtable)
library(ggplot2)
library(data.table)
library(ggsn) # add N arrow
library(rgdal)
library(maps)
library(mapdata)
library(ggmap)
library(sf)
library(ggrepel) # for labeling map
library(doBy)
library(car) # for the logit function
library(sp)
library(lubridate)
library(colorspace)
library(corrplot)
library(circlize)
library(psych)
library(formattable)
library(knitr)
library(tidyr)
library(Hmisc)
# read in data
fishP=fread("Dace_Data_Occu.csv")
dim(fishP)
fishP
summary(fishP)
# #Remove species with low detections (present at <10 sites)
fishP[,c(9,14,15,16,17,19,21,23,26,29,30,31) ]<- NULL
# fishP[,c(9,14,11,15,16,17,18,19,20,21,23,25,26,29,30,31) ]<- NULL
head(fishP)
##########################################
### Get data in order for hmsc
# Species matrix, a site * species matrix
ydat <- as.matrix(fishP[,6:21])
ydat <- as.data.frame(ydat)
# Number of covariates
K <- dim(X[,-1])[2]
# number of sites
n.sites <- nrow(X)
# number of species in Occurance matrix
n.species <- numY
# Beta coefficients dim = [nsim, 96], need array of [nsim, nspecies, ncovariates]
Beta <- out1$chains$bgibbs
dim(Beta)
# Remove intercepts from Beta
###! Need to read in and create ydat from 1_gjam_all_spp.R to run this
spp.names <- colnames(ydat)
int.names <- vector()
for(i in 1:dim(ydat)[2]){
int.names[i] <- paste(spp.names[i],"_intercept",sep='')
}
Beta2 <- Beta[, !colnames(Beta) %in% int.names]
dim(Beta2)
dim(Beta2)
head(Beta2)
nsim <- 50000
# Chain length from analysis
chainLength <- dim(Beta2)[1]
# # Select thinned steps in chain for posterior predictions to ensure we take values from
# # length of posterior
ID = seq( 1 , chainLength , floor(chainLength/nsim) )
length(ID)
# Grab nsim samples
Beta2sub <- Beta2[ID,]
dim(Beta2sub)
head(Beta2sub)
nsim <- 5000
# Chain length from analysis
chainLength <- dim(Beta2)[1]
# # Select thinned steps in chain for posterior predictions to ensure we take values from
# # length of posterior
ID = seq( 1 , chainLength , floor(chainLength/nsim) )
length(ID)
# Grab nsim samples
Beta2sub <- Beta2[ID,]
dim(Beta2sub)
head(Beta2sub)
head(Beta2sub)
# head(lst1[[1]])
spp.names <- colnames(ydat)
param.names <- vector()
for(i in 1:dim(ydat)[2]){
param.names[i] <- paste(spp.names[i],"_Averagewidth",sep='')
}
lst1[[1]] <- Beta2sub[, colnames(Beta2sub) %in% param.names]
head(lst1[[1]])
param.names <- vector()
for(i in 1:dim(ydat)[2]){
param.names[i] <- paste(spp.names[i],"_Averagedepth",sep='')
}
lst1[[2]] <- Beta2sub[, colnames(Beta2sub) %in% param.names]
head(lst1[[2]])
param.names <- vector()
for(i in 1:dim(ydat)[2]){
param.names[i] <- paste(spp.names[i],"_Averagesubstratesize",sep='')
}
lst1[[3]] <- Beta2sub[, colnames(Beta2sub) %in% param.names]
head(lst1[[3]])
param.names <- vector()
for(i in 1:dim(ydat)[2]){
param.names[i] <- paste(spp.names[i],"_Numberofpools",sep='')
}
lst1[[4]] <- Beta2sub[, colnames(Beta2sub) %in% param.names]
head(lst1[[4]])
param.names <- vector()
for(i in 1:dim(ydat)[2]){
param.names[i] <- paste(spp.names[i],"_developed",sep='')
}
lst1[[5]] <- Beta2sub[, colnames(Beta2sub) %in% param.names]
head(lst1[[5]])
BetaA <- array(as.numeric(unlist(lst1)), dim=c(length(ID),numY,K))
lst1 <- list()
# for(i in 1:5){
#     lst1[[i]] <- Beta2sub[,c(i,5+i,10+i,15+i,20+i,25+i,30+i,35+i,40+i,45+i,50+i,55+i,60+i,65+i,70+i,75+i)]
# }
# str(lst1)
# head(lst1[[1]])
spp.names <- colnames(ydat)
param.names <- vector()
for(i in 1:dim(ydat)[2]){
param.names[i] <- paste(spp.names[i],"_Averagewidth",sep='')
}
lst1[[1]] <- Beta2sub[, colnames(Beta2sub) %in% param.names]
head(lst1[[1]])
param.names <- vector()
for(i in 1:dim(ydat)[2]){
param.names[i] <- paste(spp.names[i],"_Averagedepth",sep='')
}
lst1[[2]] <- Beta2sub[, colnames(Beta2sub) %in% param.names]
head(lst1[[2]])
param.names <- vector()
for(i in 1:dim(ydat)[2]){
param.names[i] <- paste(spp.names[i],"_Averagesubstratesize",sep='')
}
lst1[[3]] <- Beta2sub[, colnames(Beta2sub) %in% param.names]
head(lst1[[3]])
param.names <- vector()
for(i in 1:dim(ydat)[2]){
param.names[i] <- paste(spp.names[i],"_Numberofpools",sep='')
}
lst1[[4]] <- Beta2sub[, colnames(Beta2sub) %in% param.names]
head(lst1[[4]])
param.names <- vector()
for(i in 1:dim(ydat)[2]){
param.names[i] <- paste(spp.names[i],"_developed",sep='')
}
lst1[[5]] <- Beta2sub[, colnames(Beta2sub) %in% param.names]
head(lst1[[5]])
dim(lst1[[5]])
BetaA <- array(as.numeric(unlist(lst1)), dim=c(length(ID),numY,K))
dim(BetaA)
# Rename for code below
Beta <- BetaA
# Number of mcmc samples
n.sims <- dim(Beta)[1]
# Variance covariance matrix (named Sigma2 for adpating Pollock code), just need this for dimensions
Sigma2 <- array(NA, c(length(ID), numY, numY))
dim(Sigma2)
############# Calculate the correlation due to the environment
EnvRho <- apply(Beta, 1,
function(x) {
matrix(rowSums(apply(cbind(x[, -1]), 2, function(y) outer(y, y))), n.species)
}
)
dim(EnvRho) <- rev(dim(Sigma2))
EnvRho <- aperm(EnvRho, c(3, 2, 1))
dim(EnvRho)
COVX <- cov(X)
for(sims in seq_len(n.sims)) {
for(species in seq_len(n.species)) {
for(species.prime in seq_len(n.species)) {
EnvRho[sims, species, species.prime] <- (EnvRho[sims, species, species.prime] +
sum(sapply(seq_len(K)[-1], function(k) {
sum(Beta[sims, species, k] *
Beta[sims, species.prime, seq_len(K)[-c(1, k)]] *
COVX[k, seq_len(K)[-c(1, k)]]
)}
)))
}
}
}
EnvRho <- apply(EnvRho, 1, cov2cor)
dim(EnvRho) <- rev(dim(Sigma2))
EnvRho <- aperm(EnvRho, c(3, 2, 1))
dim(EnvRho)
# Posterior mean EnvRho and 95% credile intervals
apply(EnvRho,c(3,2),mean)
apply(EnvRho,c(3,2),quantile, 0.025)
apply(EnvRho,c(3,2),quantile, 0.975)
# Save posterior samples for EnvRho
saveRDS(EnvRho, file="EnvRho.rds")
