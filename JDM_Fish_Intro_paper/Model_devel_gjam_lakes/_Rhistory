# fishP <-plyr::join(fishP, covs, by=c("DOW"), type='left', match='all')
# dim(fishP)
# head(fishP)
# summary(fishP)
##########################################
### Get data in order for hmsc
# Species matrix, a site * species matrix
ydat <- fishP[,8:26]
ydat <- as.data.frame(ydat)
# #Determining co-linearity
# MyVar<-fishP[,c(21:27)]
# pairs.panels(MyVar, method = "pearson", hist.col = "#00AFBB", density = TRUE, ellipses = FALSE)
# Covariate matrix
xdat<- fishP[,2:7]
xdat <- data.table(xdat)
head(xdat)
xdat$area.hectares <- log(xdat$area.hectares)
summary(xdat)
# # Change all covariate data columns to numeric
# changeCols <- colnames(xdat)[2:6]
# xdat[,(changeCols):= lapply(.SD, as.numeric), .SDcols = changeCols]
xdat <- as.data.frame(xdat)
str(xdat)
head(xdat)
# pairs.panels(xmat, method = "pearson", hist.col = "#00AFBB", density = TRUE, ellipses = FALSE)
# REDUCT = F in modelList overrides automatic dimension reduction.
ml <-list(FULL=T, PREDICTX = F, ng=90000,burnin=70000,typeNames=rep("PA",dim(ydat)[2]), REDUCT=F)
jdm1 = gjam(~ area.hectares + max_depth_m + mean.gdd + proportion_disturbed_ws + littoral.zone + secchi.m,
xdata=xdat, ydata=ydat,
modelList=ml)
# jdm1 <- readRDS(file="gjamOUT1.rds")
str(jdm1)
summary(jdm1)
names(jdm1)
# Grab residual correlation
# jdm1$parameters$corMu
#
# jdm1$parameter$rndEff
# jdm1$parameter$sigMu
# Plot gjam output
plotPars <- list(GRIDPLOTS=T,PLOTTALLy=F,SAVEPLOTS=T,SMALLPLOTS = F)
fit <- gjamPlot(jdm1, plotPars)
#### Species richness (responses predicted > 0)
rich <- jdm1$prediction$richness
head(rich)
dim(rich)
########## marginal prediction
newdata <- list(xdata = xdat, nsim=10000)
tmp     <- gjamPredict(jdm1, newdata=newdata)
full    <- tmp$sdList$yMu
# Calculate marginal AUC for each species (larger is better)
AUC <- numeric()
for(i in 1:dim(ydat)[2]){
AUC[i] <- somers2(full[,i], ydat[,i])[1]
}
AUC
## Conditional predictions
############## For all species
# Grab species names for looping through species
cnames <- colnames(ydat)
cond.preds <- matrix(NA, nrow = 2, ncol=length(cnames))
dim(cond.preds)
for(j in 1:length(cnames)){
yc <- ydat[ , !(colnames(ydat) %in% cnames[j])] # Loop through each species for conditional predictions
new <- list(ydataCond = yc, xdata=xdat, nsim=10000)   # cond on obs P/A data
preds <- gjamPredict(output = jdm1, newdata = new)
condy  <- preds$sdList$yMu
cond.preds[2,j] <- somers2(condy[,(colnames(condy) %in% cnames[j])], ydat[,(colnames(condy) %in% cnames[j])])[1]
cond.preds[1,j] <- somers2(full[,(colnames(condy) %in% cnames[j])], ydat[,(colnames(condy) %in% cnames[j])])[1]
}
colnames(cond.preds) <- cnames
rownames(cond.preds) <- c("Marginal AUC", "Conditional AUC")
write.csv(cond.preds, "Marginal_conditional_AUCs.csv")
# MCMC samples of Sigma
SigmaOut <-jdm1$chains$sgibbs
str(SigmaOut)
saveRDS(SigmaOut, file="SigmaOut.rds")
## Convert Sigma to Corr
# SigmaOut.rds contains the lower triangle of the variance covariance matrix, e.g., 136 columns with 16 species
Sigma <- readRDS(file="SigmaOut.rds")
str(Sigma)
dim(Sigma)
postSigMeans <- apply(Sigma,2,mean)
length(postSigMeans)
S <- diag(dim(ydat)[2])
S[lower.tri(S, diag=TRUE)] <- postSigMeans
# Convert S (half matrix) to full matrix
X <- diag(dim(ydat)[2])
X[lower.tri(X, diag=TRUE)] <- postSigMeans
X <- X + t(X) - diag(diag(X))
# Convert Sigma to Rho
Rho <- array(NA, dim=c(dim(Sigma)[1], dim(X)[1], dim(X)[1]))
dim(Rho)
for(samp in 1:dim(Sigma)[1]){
# Grab mcmc sample from Sigma
sigsamp <- Sigma[samp,]
# Convert S (half matrix) to full matrix
Stemp <- diag(dim(ydat)[2])
Stemp[lower.tri(Stemp, diag=TRUE)] <- sigsamp
Stemp <- Stemp + t(Stemp) - diag(diag(Stemp))
# Calculate correlation matrix from Sigma
Rho[samp, , ] <- cov2cor(Stemp)
}
dim(Rho)
# Posterior mean
RhoMean <- apply(Rho,c(3,2),mean)
# Lower CI
RhoCIL <- apply(Rho,c(3,2),quantile, 0.025)
# Upper CI
RhoCIU <- apply(Rho,c(3,2),quantile, 0.975)
# Use this to plot only significant cors
sigCors <- RhoCIL * RhoCIU > 0
########### Residual correlations
species.names<-colnames(ydat)
# Posterior means of Rho
# jdm1$parameters$corMu
# colnames(ydat)
colnames(RhoMean) <- species.names
rownames(RhoMean) <- species.names
colMat <- matrix(NA, nrow = nrow(RhoMean), ncol = ncol(RhoMean))
colMat[which(RhoMean > 0 & sigCors =='TRUE', arr.ind = TRUE)] <- "blue"
colMat[which(RhoMean < 0 & sigCors =='TRUE', arr.ind = TRUE)] <- "red"
res<-6
tiff(filename = 'resid_corr_mn_lakes.tiff', height = 500*res, width = 500*res, res=72*res)
def.par <- par(no.readonly = TRUE)
chordDiagram(RhoMean, symmetric = TRUE,
annotationTrack = c("grid"), grid.col = "grey",
col = colMat,
annotationTrackHeight = c(0.01, 0.01),
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(RhoMean))))))
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.text(CELL_META$xcenter, CELL_META$ylim[1], CELL_META$sector.index,
facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
}, bg.border = NA)
par(def.par)
dev.off()
# Posterior means
# sigma
# SigmaOut <-jdm1$chains$sgibbs
# BetaOut <- jdm1$chains$bgibbs
# saveRDS(BetaOut, file=paste("BetaOut",i,".rds",sep=''))
# saveRDS(SigmaOut, file=paste("SigmaOut",i,".rds",sep=''))
# saveRDS(jdm1, file=paste("gjamOut",i,".rds",sep=''))
write.csv(RhoMean,'correlation.matrix.mn.lakes.csv')
write.csv(RhoMean,'resid.correlation.matrix.mn.lakes.csv')
dim(ydat)
summary(jdm1)
Sigma <- readRDS(file="SigmaOut.rds")
str(Sigma)
dim(Sigma)
postSigMeans <- apply(Sigma,2,mean)
length(postSigMeans)
num.spp <- 19
# SigmaOut.rds contains the lower triangle of the variance covariance matrix, i.e., 136 columns with 16 species
Sigma <- readRDS(file="SigmaOut.rds")
str(Sigma)
dim(Sigma)
postSigMeans <- apply(Sigma,2,mean)
length(postSigMeans)
num.spp <- 19
S <- diag(num.spp)
S[lower.tri(S, diag=TRUE)] <- postSigMeans
# Convert S (half matrix) to full matrix
X <- diag(num.spp)
X[lower.tri(X, diag=TRUE)] <- postSigMeans
X <- X + t(X) - diag(diag(X))
# Convert Sigma to Rho
Rho <- array(NA, dim=c(dim(Sigma)[1], dim(X)[1], dim(X)[1]))
dim(Rho)
for(samp in 1:dim(Sigma)[1]){
# Grab mcmc sample from Sigma
sigsamp <- Sigma[samp,]
# Convert S (half matrix) to full matrix
Stemp <- diag(num.spp)
Stemp[lower.tri(Stemp, diag=TRUE)] <- sigsamp
Stemp <- Stemp + t(Stemp) - diag(diag(Stemp))
# Calculate correlation matrix from Sigma
Rho[samp, , ] <- cov2cor(Stemp)
}
dim(Rho)
RhoMean <- apply(Rho,c(3,2),mean)
# Make upper triangular matrix set to zero
RhoMean[upper.tri(RhoMean)] <- NA
# remove diagonal
RhoMean[upper.tri(RhoMean,diag=TRUE)] <- NA
RMean <- as.numeric(t(RhoMean))
RMean <- RMean[!is.na(RMean)]
# Lower CI
RhoCIL <- apply(Rho,c(3,2),quantile, 0.025)
# Make upper triangular matrix set to zero
RhoCIL[upper.tri(RhoCIL)] <- NA
# remove diagonal
RhoCIL[upper.tri(RhoCIL,diag=TRUE)] <- NA
RCIL <- as.numeric(t(RhoCIL))
RCIL <- RCIL[!is.na(RCIL)]
# Upper CI
RhoCIU <- apply(Rho,c(3,2),quantile, 0.975)
# Make upper triangular matrix set to zero
RhoCIU[upper.tri(RhoCIU)] <- NA
# remove diagonal
RhoCIU[upper.tri(RhoCIU,diag=TRUE)] <- NA
RCIU <- as.numeric(t(RhoCIU))
RCIU <- RCIU[!is.na(RCIU)]
saveRDS(Rho, file="ResRho.rds")
# rm(list=ls())
# load the package
library(devtools)
# library(Hmsc)
library(gjam)
library(dplyr)
library(coda)
library(xtable)
library(ggplot2)
library(data.table)
library(ggsn) # add N arrow
library(rgdal)
library(maps)
library(mapdata)
library(ggmap)
library(sf)
library(ggrepel) # for labeling map
library(doBy)
library(car) # for the logit function
library(sp)
library(lubridate)
library(colorspace)
library(corrplot)
library(circlize)
library(psych)
library(formattable)
library(knitr)
library(tidyr)
library(Hmisc)
# read in data
fishP=fread("lake_predictors_fish_PA_for_HMSC.csv")
dim(fishP)
fishP
summary(fishP)
# Remove lakes with missing (NA) predictors
fishP <- fishP[!is.na(littoral.zone)]
fishP <- fishP[!is.na(mean.gdd)]
fishP <- fishP[!is.na(proportion_disturbed_ws)]
summary(fishP)
dim(fishP)
# Export final data
write.csv(fishP, "finalDat.csv", row.names = F)
# # #Remove species with low detections (present at <10 sites)
# # fishP[,c(9,14,15,16,17,19,21,23,26,29,30,31) ]<- NULL
# fishP[,c(9,14,11,15,16,17,18,19,20,21,23,25,26,29,30,31) ]<- NULL
# # Read in and merge covariates
# covs <- fread('lake_predictors_fish_PA_for_HMSC.csv')
# dim(covs)
#
# fishP <-plyr::join(fishP, covs, by=c("DOW"), type='left', match='all')
# dim(fishP)
# head(fishP)
# summary(fishP)
##########################################
### Get data in order for hmsc
# Species matrix, a site * species matrix
ydat <- fishP[,8:26]
ydat <- as.data.frame(ydat)
# #Determining co-linearity
# MyVar<-fishP[,c(21:27)]
# pairs.panels(MyVar, method = "pearson", hist.col = "#00AFBB", density = TRUE, ellipses = FALSE)
# Covariate matrix
xdat<- fishP[,2:7]
xdat <- data.table(xdat)
head(xdat)
xdat$area.hectares <- log(xdat$area.hectares)
summary(xdat)
# # Change all covariate data columns to numeric
# changeCols <- colnames(xdat)[2:6]
# xdat[,(changeCols):= lapply(.SD, as.numeric), .SDcols = changeCols]
xdat <- as.data.frame(xdat)
str(xdat)
head(xdat)
# pairs.panels(xmat, method = "pearson", hist.col = "#00AFBB", density = TRUE, ellipses = FALSE)
# REDUCT = F in modelList overrides automatic dimension reduction.
ml <-list(FULL=T, PREDICTX = F, ng=90000,burnin=70000,typeNames=rep("PA",dim(ydat)[2]), REDUCT=F)
jdm1 = gjam(~ area.hectares + max_depth_m + mean.gdd + proportion_disturbed_ws + littoral.zone + secchi.m,
xdata=xdat, ydata=ydat,
modelList=ml)
saveRDS(jdm1, file="gjamOUT1.rds")
require(data.table)
require(mvtnorm)
require(abind)
### Caclulate, from a JDM, the between species correlation due to their shared
### environmental responses. Following the approach of Pollock et al. (2014).
# Read in final dat
datFinal <- fread("Finaldat.csv")
out1 <- readRDS(file="gjamOUT1.rds")
library(devtools)
# library(Hmsc)
library(gjam)
library(dplyr)
library(coda)
library(xtable)
library(ggplot2)
library(data.table)
library(ggsn) # add N arrow
library(rgdal)
library(maps)
library(mapdata)
library(ggmap)
library(sf)
library(ggrepel) # for labeling map
library(doBy)
library(car) # for the logit function
library(sp)
library(lubridate)
library(colorspace)
library(corrplot)
library(circlize)
library(psych)
library(formattable)
library(knitr)
library(tidyr)
library(Hmisc)
# read in data
fishP=fread("lake_predictors_fish_PA_for_HMSC.csv")
dim(fishP)
fishP
summary(fishP)
# Remove lakes with missing (NA) predictors
fishP <- fishP[!is.na(littoral.zone)]
fishP <- fishP[!is.na(mean.gdd)]
fishP <- fishP[!is.na(proportion_disturbed_ws)]
summary(fishP)
dim(fishP)
ydat <- fishP[,8:26]
ydat <- as.data.frame(ydat)
dim(ydat)
head(datFinal)
X <- as.matrix(scale(datFinal[,2:7]))
head(X)
X <- as.matrix(cbind(c(rep(1,dim(X)[1])),X))
dim(X)
head(X)
# Number of covariates
K <- dim(X[,-1])[2]
# number of sites
n.sites <- nrow(X)
# number of species in Occurance matrix
n.species <- numY
# Beta coefficients dim = [nsim, 96], need array of [nsim, nspecies, ncovariates]
Beta <- out1$chains$bgibbs
dim(Beta)
# Number of response variables
numY <- 19
# number of species in Occurance matrix
n.species <- numY
spp.names <- colnames(ydat)
int.names <- vector()
for(i in 1:dim(ydat)[2]){
int.names[i] <- paste(spp.names[i],"_intercept",sep='')
}
Beta2 <- Beta[, !colnames(Beta) %in% int.names]
dim(Beta2)
dim(Beta2)
head(Beta2)
nsim <- 5000
# Chain length from analysis
chainLength <- dim(Beta2)[1]
# # Select thinned steps in chain for posterior predictions to ensure we take values from
# # length of posterior
ID = seq( 1 , chainLength , floor(chainLength/nsim) )
length(ID)
# Grab nsim samples
Beta2sub <- Beta2[ID,]
dim(Beta2sub)
head(Beta2sub)
const <- 6 # This is the number of covariates, we are stepping through and creating, for instance, a matrix
# of the mcmc samples (rows) for the effects of stream width for each species (column)
lst1 <- list()
for(i in 1:6){
lst1[[i]] <- Beta2sub[,c(i,6+i,11+i,16+i,21+i,26+i,31+i,36+i,41+i,46+i,51+i,56+i,61+i,66+i,71+i,76+i,81+i,86+i,91+i,96+i)]
}
str(lst1)
head(lst1[[1]])
head(Beta2sub)
head(lst1[[1]])
head(Beta2sub)
int.names
X
head(Beta)
lst1[[i]] <- Beta2sub[, colnames(Beta2sub) %in% param.names]
spp.names <- colnames(ydat)
param.names <- vector()
for(i in 1:dim(ydat)[2]){
param.names[i] <- paste(spp.names[i],"area.hectares",sep='')
}
lst1[[i]] <- Beta2sub[, colnames(Beta2sub) %in% param.names]
param.names
lst1[[1]]
colnames(Beta2sub)
param.names
spp.names <- colnames(ydat)
param.names <- vector()
for(i in 1:dim(ydat)[2]){
param.names[i] <- paste(spp.names[i],"_area.hectares",sep='')
}
lst1[[i]] <- Beta2sub[, colnames(Beta2sub) %in% param.names]
lst1[[1]]
head(Beta2sub)
param.names
spp.names <- colnames(ydat)
param.names <- vector()
for(i in 1:dim(ydat)[2]){
param.names[i] <- paste(spp.names[i],"_area.hectares",sep='')
}
lst1[[i]] <- Beta2sub[, colnames(Beta2sub) %in% param.names]
head(lst1[[1]])
head(Beta2sub)
Beta2sub[, colnames(Beta2sub) %in% param.names]
colnames(Beta2sub) %in% param.names
names.use <- names(Beta2sub)[names(Beta2sub) %in% param.names)]
names.use <- names(Beta2sub)[names(Beta2sub) %in% param.names]
names.use
names(Beta2sub)
names.use <- Beta2sub[colnames(Beta2sub) %in% param.names]
names.use
names.use <- colnames(Beta2sub)[colnames(Beta2sub) %in% param.names]
names.use
lst1[[i]] <- Beta2sub[, names.use]
head(lst1[[1]])
Beta2sub
lst1[[1]] <- Beta2sub[, names.use]
head(lst1[[1]])
lst1[[1]] <- Beta2sub[, colnames(Beta2sub) %in% param.names]
head(lst1[[1]])
head(Beta2sub)
spp.names <- colnames(ydat)
param.names <- vector()
for(i in 1:dim(ydat)[2]){
param.names[i] <- paste(spp.names[i],"_area.hectares",sep='')
}
lst1[[1]] <- Beta2sub[, colnames(Beta2sub) %in% param.names]
head(lst1[[1]])
param.names <- vector()
for(i in 1:dim(ydat)[2]){
param.names[i] <- paste(spp.names[i],"_maxdepthm",sep='')
}
lst1[[2]] <- Beta2sub[, colnames(Beta2sub) %in% param.names]
head(lst1[[2]])
param.names <- vector()
for(i in 1:dim(ydat)[2]){
param.names[i] <- paste(spp.names[i],"_mean.gdd",sep='')
}
lst1[[3]] <- Beta2sub[, colnames(Beta2sub) %in% param.names]
head(lst1[[3]])
param.names <- vector()
for(i in 1:dim(ydat)[2]){
param.names[i] <- paste(spp.names[i],"_proportiondisturbedws",sep='')
}
lst1[[4]] <- Beta2sub[, colnames(Beta2sub) %in% param.names]
head(lst1[[4]])
param.names <- vector()
for(i in 1:dim(ydat)[2]){
param.names[i] <- paste(spp.names[i],"_littoral.zone",sep='')
}
lst1[[5]] <- Beta2sub[, colnames(Beta2sub) %in% param.names]
head(lst1[[5]])
param.names <- vector()
for(i in 1:dim(ydat)[2]){
param.names[i] <- paste(spp.names[i],"_secchi.m",sep='')
}
lst1[[6]] <- Beta2sub[, colnames(Beta2sub) %in% param.names]
head(lst1[[6]])
dim(lst1[[6]])
BetaA <- array(as.numeric(unlist(lst1)), dim=c(length(ID),numY,K))
dim(BetaA)
# Rename for code below
Beta <- BetaA
# Number of mcmc samples
n.sims <- dim(Beta)[1]
# Variance covariance matrix (named Sigma2 for adpating Pollock code), just need this for dimensions
Sigma2 <- array(NA, c(length(ID), numY, numY))
dim(Sigma2)
############# Calculate the correlation due to the environment
EnvRho <- apply(Beta, 1,
function(x) {
matrix(rowSums(apply(cbind(x[, -1]), 2, function(y) outer(y, y))), n.species)
}
)
dim(EnvRho) <- rev(dim(Sigma2))
EnvRho <- aperm(EnvRho, c(3, 2, 1))
dim(EnvRho)
COVX <- cov(X)
for(sims in seq_len(n.sims)) {
for(species in seq_len(n.species)) {
for(species.prime in seq_len(n.species)) {
EnvRho[sims, species, species.prime] <- (EnvRho[sims, species, species.prime] +
sum(sapply(seq_len(K)[-1], function(k) {
sum(Beta[sims, species, k] *
Beta[sims, species.prime, seq_len(K)[-c(1, k)]] *
COVX[k, seq_len(K)[-c(1, k)]]
)}
)))
}
}
}
EnvRho <- apply(EnvRho, 1, cov2cor)
dim(EnvRho) <- rev(dim(Sigma2))
EnvRho <- aperm(EnvRho, c(3, 2, 1))
dim(EnvRho)
# Posterior mean EnvRho and 95% credile intervals
apply(EnvRho,c(3,2),mean)
apply(EnvRho,c(3,2),quantile, 0.025)
apply(EnvRho,c(3,2),quantile, 0.975)
# Save posterior samples for EnvRho
saveRDS(EnvRho, file="EnvRho.rds")
